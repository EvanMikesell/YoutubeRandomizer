{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mikes\\\\Documents\\\\GitHub\\\\YoutubeRandomizer\\\\src\\\\app.js\";\nimport React, { Component } from \"react\";\nimport Title from \"./components/title.js\";\nimport MiddleRow from \"./components/middleRow.js\";\nimport EmbeddedVideo from \"./components/embeddedVideo.js\";\nimport utils from \"./utils.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomVideo = () => {\n      this.getVideo();\n    };\n\n    this.updateFilters = this.updateFilters.bind(this);\n    this.state = {\n      videoURL: \"\",\n      searchWords: [],\n      category: 0,\n      length: \"any\",\n      year: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.createWordList();\n  } //getting values from our filter\n\n\n  updateFilters(categoryName, duration, selectedYear) {\n    let categoryNumber = utils.getCategoryMap().g;\n    this.setState({\n      category: categoryNumber\n    });\n    this.setState({\n      length: duration\n    });\n    this.setState({\n      year: selectedYear\n    });\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\n    console.log(\"Length:\", duration);\n    console.log(\"Year:\", selectedYear);\n  }\n\n  async getVideo() {\n    let keyword = this.state.searchWords[Math.floor(Math.random() * this.state.searchWords.length + 1)];\n    console.log(\"Chosen Keyword: \" + keyword);\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\";\n    let baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&type=video&key=\" + youtubeAPIKey;\n    baseApiUrl = this.applyFilters(baseApiUrl);\n    let apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword; //make API call\n\n    let res = await fetch(apiUrlWithKeyword);\n    let data = await res.json();\n    let searchLength = 0; //checking if api quota has been exceeded, searchlength will be undefined\n\n    try {\n      searchLength = data.items.length;\n    } catch (error) {\n      alert(\"The Youtube API quota for this project has been exceeded. Unfortunately we can only make 100 requests each day. Quota resets at 12AM PST.\");\n    } //if true, either a bad keyword was picked, or filters are not allowing for a video to be found\n\n\n    if (searchLength === 0) {\n      //we will make the search without specifying a keyword\n      res = await fetch(baseApiUrl);\n      data = await res.json();\n      searchLength = data.items.length;\n\n      if (searchLength === 0) {\n        alert(\"Could not find a video. The selected filters may not be compatible with eachother.\");\n      } else {\n        alert(\"Found a video, but didn't use keyword\");\n      }\n    }\n\n    let idIndex = Math.floor(Math.random() * searchLength);\n    let randomURL = \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\n    this.setState({\n      videoURL: randomURL\n    });\n    return randomURL;\n  }\n\n  applyFilters(baseApiUrl) {\n    //filter by category, length, and year\n    if (this.state.category !== 0) {\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\n    }\n\n    if (this.state.length !== \"any\") {\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\n    }\n\n    if (this.state.year !== 0) {\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" + \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\n    }\n\n    return baseApiUrl;\n  } //creating random word list that we will use to search for a video\n\n\n  async createWordList() {\n    try {\n      const response = await fetch(\"/common-words.json\");\n      const data = await response.json();\n      this.setState({\n        searchWords: data\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiddleRow, {\n          updateFilters: this.updateFilters,\n          getRandomVideo: this.getRandomVideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EmbeddedVideo, {\n          url: this.state.videoURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mikes/Documents/GitHub/YoutubeRandomizer/src/app.js"],"names":["React","Component","Title","MiddleRow","EmbeddedVideo","utils","App","constructor","props","getRandomVideo","getVideo","updateFilters","bind","state","videoURL","searchWords","category","length","year","componentDidMount","createWordList","categoryName","duration","selectedYear","categoryNumber","getCategoryMap","g","setState","console","log","keyword","Math","floor","random","youtubeAPIKey","baseApiUrl","applyFilters","apiUrlWithKeyword","res","fetch","data","json","searchLength","items","error","alert","idIndex","randomURL","id","videoId","response","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Title from \"./components/title.js\";\r\nimport MiddleRow from \"./components/middleRow.js\";\r\nimport EmbeddedVideo from \"./components/embeddedVideo.js\";\r\nimport utils from  \"./utils.js\";\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.updateFilters = this.updateFilters.bind(this);\r\n    this.state = {\r\n      videoURL: \"\",\r\n      searchWords: [],\r\n      category: 0,\r\n      length: \"any\",\r\n      year: 0\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.createWordList();\r\n  }\r\n\r\n  //getting values from our filter\r\n  updateFilters(categoryName, duration, selectedYear) {\r\n    let categoryNumber = utils.getCategoryMap().g\r\n    this.setState({ category: categoryNumber}); \r\n    this.setState({ length: duration}); \r\n    this.setState({ year: selectedYear}); \r\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\r\n    console.log(\"Length:\", duration);\r\n    console.log(\"Year:\", selectedYear);\r\n  };\r\n\r\n  async getVideo() {\r\n    let keyword = this.state.searchWords[Math.floor(Math.random() * this.state.searchWords.length + 1)];\r\n    console.log(\"Chosen Keyword: \" + keyword);\r\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\";\r\n\r\n    let baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&type=video&key=\" + youtubeAPIKey;\r\n    baseApiUrl = this.applyFilters(baseApiUrl);\r\n    let apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword\r\n\r\n    //make API call\r\n    let res = await fetch(apiUrlWithKeyword);\r\n    let data = await res.json(); \r\n    let searchLength = 0;\r\n\r\n    //checking if api quota has been exceeded, searchlength will be undefined\r\n    try{\r\n      searchLength = data.items.length;\r\n    }\r\n    catch (error){\r\n      alert(\"The Youtube API quota for this project has been exceeded. Unfortunately we can only make 100 requests each day. Quota resets at 12AM PST.\");\r\n    }\r\n\r\n    //if true, either a bad keyword was picked, or filters are not allowing for a video to be found\r\n    if (searchLength === 0){\r\n      //we will make the search without specifying a keyword\r\n      res = await fetch(baseApiUrl);\r\n      data = await res.json(); \r\n      searchLength = data.items.length;\r\n\r\n      if (searchLength === 0){\r\n        alert(\"Could not find a video. The selected filters may not be compatible with eachother.\");\r\n      }\r\n      else{\r\n        alert(\"Found a video, but didn't use keyword\");\r\n      }\r\n    }\r\n\r\n    let idIndex = Math.floor(Math.random() * searchLength);\r\n    let randomURL = \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\r\n    this.setState({ videoURL: randomURL });\r\n    return randomURL;\r\n  }\r\n\r\n  applyFilters(baseApiUrl) {\r\n    //filter by category, length, and year\r\n    if (this.state.category !== 0) {\r\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\r\n    }\r\n\r\n    if (this.state.length !== \"any\") {\r\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\r\n    }\r\n\r\n    if (this.state.year !== 0) {\r\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" +\r\n        \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\r\n    }\r\n    return baseApiUrl;\r\n  }\r\n\r\n  //creating random word list that we will use to search for a video\r\n  async createWordList() {\r\n    try {\r\n      const response = await fetch(\"/common-words.json\");\r\n      const data = await response.json();\r\n      this.setState({ searchWords: data });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  getRandomVideo = () => {\r\n    this.getVideo();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <body>\r\n        <div>\r\n          <Title />\r\n          <MiddleRow updateFilters={this.updateFilters} getRandomVideo={this.getRandomVideo} />\r\n          <EmbeddedVideo url={this.state.videoURL} />\r\n        </div>\r\n      </body>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}