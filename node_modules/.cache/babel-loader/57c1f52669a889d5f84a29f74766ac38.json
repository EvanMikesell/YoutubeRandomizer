{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mikes\\\\Documents\\\\GitHub\\\\YoutubeRandomizer\\\\src\\\\app.js\";\nimport React, { Component } from \"react\";\nimport Title from \"./components/title.js\";\nimport MiddleRow from \"./components/middleRow.js\";\nimport EmbeddedVideo from \"./components/embeddedVideo.js\"; //map containing categories and their ID values (for example, the ID for Film & Action is 1)\n\nvar catagoriesMap = new Map();\ncatagoriesMap.set(\"No category\", 0);\ncatagoriesMap.set(\"Film & Animation\", 1);\ncatagoriesMap.set(\"Autos & Vehicles\", 2);\ncatagoriesMap.set(\"Music\", 10);\ncatagoriesMap.set(\"Pets & Animals\", 15);\ncatagoriesMap.set(\"Sports\", 17);\ncatagoriesMap.set(\"Travel & Events\", 19);\ncatagoriesMap.set(\"Gaming\", 20);\ncatagoriesMap.set(\"People & Blogs\", 22);\ncatagoriesMap.set(\"Comedy\", 23);\ncatagoriesMap.set(\"Entertainment\", 24);\ncatagoriesMap.set(\"News & Politics\", 25);\ncatagoriesMap.set(\"Howto & Style\", 26);\ncatagoriesMap.set(\"Education\", 27);\ncatagoriesMap.set(\"Science & Technology\", 28);\ncatagoriesMap.set(\"Nonprofits & Activism\", 29);\ncatagoriesMap.set(\"Movies\", 30);\ncatagoriesMap.set(\"Trailers\", 44);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomVideo = () => {\n      this.getVideo();\n    };\n\n    this.updateFilters = this.updateFilters.bind(this);\n    this.state = {\n      videoURL: \"\",\n      searchWords: [],\n      category: 0,\n      length: \"any\",\n      year: 0\n    };\n  } //getting values from our filter\n\n\n  updateFilters(categoryName, duration, selectedYear) {\n    var categoryNumber = catagoriesMap.get(categoryName);\n    this.setState({\n      category: categoryNumber\n    });\n    this.setState({\n      length: duration\n    });\n    this.setState({\n      year: selectedYear\n    });\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\n    console.log(\"Length:\", duration);\n    console.log(\"Year:\", selectedYear);\n  }\n\n  async getVideo() {\n    var keywords = await this.createWordList();\n    var keyword = keywords[Math.floor(Math.random() * keywords.length + 1)];\n    console.log(\"Chosen Keyword: \" + keyword);\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\"; //api url before adding our values from the filters\n\n    var baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&type=video&key=\" + youtubeAPIKey; //filter by a category\n\n    baseApiUrl = this.applyFilters(baseApiUrl); //apply our keyword in a new variable\n\n    var apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword;\n    let res = await fetch(apiUrlWithKeyword);\n    let data = await res.json();\n    var searchLength; //checking if api quota has been exceeded, searchlength will be undefined\n\n    try {\n      searchLength = data.items.length;\n    } catch (error) {\n      alert(\"The Youtube API quota for this project has been exceeded. Unfortunately we can only make 100 requests each day. Quota resets at 12AM PST.\");\n    } //if true, either a bad keyword was picked, or filters are not allowing for a video to be found\n\n\n    if (searchLength === 0) {\n      //we will make the search without specifying a keyword\n      res = await fetch(baseApiUrl);\n      data = await res.json();\n      searchLength = data.items.length; //if a video couldn't be found, even without a keyword\n\n      if (searchLength === 0) {\n        alert(\"Could not find a video. The selected filters may not be compatible with eachother.\");\n      } else {\n        alert(\"Found a video, but didn't use keyword\");\n      }\n    }\n\n    var idIndex = Math.floor(Math.random() * searchLength);\n    console.log(\"LENGTH: \" + data.items.length);\n    var randomURL = \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\n    console.log(\"Our URL: \" + randomURL);\n    console.log(data);\n    this.setState({\n      videoURL: randomURL\n    }); // Extract video information from API response\n\n    const video = res.data.items[0];\n    const title = video.snippet.title;\n    const url = `https://www.youtube.com/watch?v=${video.id.videoId}`; // Insert video information into MySQL database\n\n    const sql = 'INSERT INTO videos (title, url) VALUES (?, ?)';\n    const values = [title, url];\n    connection.query(sql, values, (err, result) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log('Video inserted into database:', title, url);\n    });\n    return randomURL;\n  }\n\n  applyFilters(baseApiUrl) {\n    //filter by category, length, and year\n    if (this.state.category !== 0) {\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\n    }\n\n    if (this.state.length !== \"any\") {\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\n    }\n\n    if (this.state.year !== 0) {\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" + \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\n    }\n\n    return baseApiUrl;\n  } //creating random word list that we will select a video out of\n\n\n  async createWordList() {\n    var words = [];\n    let res = await fetch(\"/common-words.json\");\n    let data = await res.json();\n    console.log(data);\n\n    for (var i = 0; i < data.length; i++) {\n      words.push(data[i]);\n    }\n\n    return words;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiddleRow, {\n          updateFilters: this.updateFilters,\n          getRandomVideo: this.getRandomVideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EmbeddedVideo, {\n          url: this.state.videoURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mikes/Documents/GitHub/YoutubeRandomizer/src/app.js"],"names":["React","Component","Title","MiddleRow","EmbeddedVideo","catagoriesMap","Map","set","App","constructor","props","getRandomVideo","getVideo","updateFilters","bind","state","videoURL","searchWords","category","length","year","categoryName","duration","selectedYear","categoryNumber","get","setState","console","log","keywords","createWordList","keyword","Math","floor","random","youtubeAPIKey","baseApiUrl","applyFilters","apiUrlWithKeyword","res","fetch","data","json","searchLength","items","error","alert","idIndex","randomURL","id","videoId","video","title","snippet","url","sql","values","connection","query","err","result","words","i","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Title from \"./components/title.js\";\r\nimport MiddleRow from \"./components/middleRow.js\";\r\nimport EmbeddedVideo from \"./components/embeddedVideo.js\";\r\n\r\n//map containing categories and their ID values (for example, the ID for Film & Action is 1)\r\nvar catagoriesMap = new Map();\r\ncatagoriesMap.set(\"No category\", 0);\r\ncatagoriesMap.set(\"Film & Animation\", 1);\r\ncatagoriesMap.set(\"Autos & Vehicles\", 2);\r\ncatagoriesMap.set(\"Music\", 10);\r\ncatagoriesMap.set(\"Pets & Animals\", 15);\r\ncatagoriesMap.set(\"Sports\", 17);\r\ncatagoriesMap.set(\"Travel & Events\", 19);\r\ncatagoriesMap.set(\"Gaming\", 20);   \r\ncatagoriesMap.set(\"People & Blogs\", 22);\r\ncatagoriesMap.set(\"Comedy\", 23);\r\ncatagoriesMap.set(\"Entertainment\", 24);\r\ncatagoriesMap.set(\"News & Politics\", 25);\r\ncatagoriesMap.set(\"Howto & Style\", 26);\r\ncatagoriesMap.set(\"Education\", 27);\r\ncatagoriesMap.set(\"Science & Technology\", 28);\r\ncatagoriesMap.set(\"Nonprofits & Activism\", 29);\r\ncatagoriesMap.set(\"Movies\", 30);\r\ncatagoriesMap.set(\"Trailers\", 44);\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.updateFilters = this.updateFilters.bind(this);\r\n    this.state = {\r\n      videoURL: \"\",\r\n      searchWords: [],\r\n      category: 0,\r\n      length: \"any\",\r\n      year: 0,\r\n    };\r\n  }\r\n\r\n  //getting values from our filter\r\n  updateFilters(categoryName, duration, selectedYear) {\r\n    var categoryNumber = catagoriesMap.get(categoryName);\r\n    this.setState({ category: categoryNumber}); \r\n    this.setState({ length: duration}); \r\n    this.setState({ year: selectedYear}); \r\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\r\n    console.log(\"Length:\", duration);\r\n    console.log(\"Year:\", selectedYear);\r\n  };\r\n\r\n  async getVideo() {\r\n    var keywords = await this.createWordList();\r\n    var keyword = keywords[Math.floor(Math.random() * keywords.length + 1)];\r\n    console.log(\"Chosen Keyword: \" + keyword);\r\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\";\r\n\r\n    //api url before adding our values from the filters\r\n    var baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&type=video&key=\" + youtubeAPIKey;\r\n    \r\n    //filter by a category\r\n    baseApiUrl = this.applyFilters(baseApiUrl);\r\n\r\n    //apply our keyword in a new variable\r\n    var apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword\r\n\r\n    let res = await fetch(apiUrlWithKeyword);\r\n    let data = await res.json(); \r\n    var searchLength;\r\n\r\n    //checking if api quota has been exceeded, searchlength will be undefined\r\n    try{\r\n      searchLength = data.items.length;\r\n    }\r\n    catch (error){\r\n      alert(\"The Youtube API quota for this project has been exceeded. Unfortunately we can only make 100 requests each day. Quota resets at 12AM PST.\");\r\n    }\r\n\r\n    //if true, either a bad keyword was picked, or filters are not allowing for a video to be found\r\n    if (searchLength === 0){\r\n      //we will make the search without specifying a keyword\r\n      res = await fetch(baseApiUrl);\r\n      data = await res.json(); \r\n      searchLength = data.items.length;\r\n      //if a video couldn't be found, even without a keyword\r\n      if (searchLength === 0){\r\n        alert(\"Could not find a video. The selected filters may not be compatible with eachother.\");\r\n      }\r\n      else{\r\n        alert(\"Found a video, but didn't use keyword\");\r\n      }\r\n    }\r\n    var idIndex = Math.floor(Math.random() * searchLength);\r\n    console.log(\"LENGTH: \" + data.items.length);\r\n    var randomURL = \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\r\n    console.log(\"Our URL: \" + randomURL);\r\n    console.log(data);\r\n    this.setState({ videoURL: randomURL });\r\n      // Extract video information from API response\r\n  const video = res.data.items[0];\r\n  const title = video.snippet.title;\r\n  const url = `https://www.youtube.com/watch?v=${video.id.videoId}`;\r\n\r\n  // Insert video information into MySQL database\r\n  const sql = 'INSERT INTO videos (title, url) VALUES (?, ?)';\r\n  const values = [title, url];\r\n  connection.query(sql, values, (err, result) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return;\r\n    }\r\n\r\n    console.log('Video inserted into database:', title, url);\r\n  });\r\n\r\n    return randomURL;\r\n  }\r\n\r\n  applyFilters(baseApiUrl) {\r\n    //filter by category, length, and year\r\n    if (this.state.category !== 0) {\r\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\r\n    }\r\n\r\n    if (this.state.length !== \"any\") {\r\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\r\n    }\r\n\r\n    if (this.state.year !== 0) {\r\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" +\r\n        \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\r\n    }\r\n    return baseApiUrl;\r\n  }\r\n\r\n  //creating random word list that we will select a video out of\r\n  async createWordList() {\r\n    var words = [];\r\n    let res = await fetch(\"/common-words.json\");\r\n    let data = await res.json();\r\n    console.log(data);\r\n    for (var i = 0; i < data.length; i++) {\r\n      words.push(data[i]);\r\n    }\r\n    return words;\r\n  }\r\n\r\n  getRandomVideo = () => {\r\n    this.getVideo();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <body>\r\n        <div>\r\n          <Title />\r\n          <MiddleRow updateFilters={this.updateFilters} getRandomVideo={this.getRandomVideo} />\r\n          <EmbeddedVideo url={this.state.videoURL} />\r\n        </div>\r\n      </body>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}