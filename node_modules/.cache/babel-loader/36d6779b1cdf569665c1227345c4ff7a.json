{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mikes\\\\Documents\\\\GitHub\\\\ytr\\\\src\\\\app.js\";\nimport React, { Component } from \"react\";\nimport Title from \"./components/title.js\";\nimport MiddleRow from \"./components/middleRow.js\";\nimport RandomVideoButton from \"./components/randomVideoButton.js\";\nimport Filter from \"./components/filter.js\"; //map containing categories and their ID values\n\nvar catagoriesMap = new Map();\ncatagoriesMap.set(\"No category\", 0);\ncatagoriesMap.set(\"Film & Animation\", 1);\ncatagoriesMap.set(\"Autos & Vehicles\", 2);\ncatagoriesMap.set(\"Music\", 10);\ncatagoriesMap.set(\"Pets & Animals\", 15);\ncatagoriesMap.set(\"Sports\", 17);\ncatagoriesMap.set(\"Travel & Events\", 19);\ncatagoriesMap.set(\"Gaming\", 20);\ncatagoriesMap.set(\"People & Blogs\", 22);\ncatagoriesMap.set(\"Comedy\", 23);\ncatagoriesMap.set(\"Entertainment\", 24);\ncatagoriesMap.set(\"News & Politics\", 25);\ncatagoriesMap.set(\"Howto & Style\", 26);\ncatagoriesMap.set(\"Education\", 27);\ncatagoriesMap.set(\"Science & Technology\", 28);\ncatagoriesMap.set(\"Nonprofits & Activism\", 29);\ncatagoriesMap.set(\"Movies\", 30);\ncatagoriesMap.set(\"Trailers\", 44); //todo: dont create the \"words\" array every time they click the button\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomVideo = () => {\n      this.getVideo();\n    };\n\n    this.updateCategory = this.updateCategory.bind(this);\n    this.state = {\n      videoURL: \"\",\n      searchWords: [],\n      category: 0,\n      length: \"any\",\n      year: 0\n    };\n  }\n\n  updateCategory(categoryName, duration, selectedYear) {\n    var categoryNumber = catagoriesMap.get(categoryName);\n    this.setState({\n      category: categoryNumber\n    });\n    this.setState({\n      length: duration\n    });\n    this.setState({\n      year: selectedYear\n    });\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\n    console.log(\"Length:\", duration);\n    console.log(\"year:\", selectedYear);\n  }\n\n  async getVideo(keywords) {\n    var keywords = await this.createWordList();\n    var keyword = keywords[Math.floor(Math.random() * keywords.length + 1)];\n    console.log(\"Chosen Keyword: \" + keyword);\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\"; //api url before adding our values from the filters\n    //var baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=\" + keyword +  \"&type=video\"     + \"&key=\" + youtubeAPIKey;\n\n    var baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25\" + \"&type=video\" + \"&key=\" + youtubeAPIKey; //filter by a category\n\n    if (this.state.category != 0) {\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\n    } //filter by length\n\n\n    if (this.state.length != \"any\") {\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\n    } //filter by year\n\n\n    if (this.state.year != 0) {\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" + \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\n    }\n\n    var apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword; //apply the key at the end\n    //baseApiUrl += \"&key=\" + youtubeAPIKey;\n    //let res = await fetch(baseApiUrl);\n\n    let res = await fetch(apiUrlWithKeyword);\n    let data = await res.json();\n    var searchLength = data.items.length;\n\n    if (searchLength == undefined) {\n      alert(\"The Youtube API quota for this project has been exceeded for today. Unfortunately we can only make 100 requests to the youtube API per day\");\n    } //if true, quota is filled, a bad keyword was picked, or filters are not allowing for a video to be found\n\n\n    if (searchLength == 0) {\n      //we will make the search without specifying a keyword\n      res = await fetch(baseApiUrl);\n      data = await res.json();\n      searchLength = data.items.length;\n\n      if (searchLength == 0) {\n        alert(\"Could not find a video. Youtube API daily quota may be exceeded or the selected filters are not compatible\");\n      } else {\n        alert(\"Didnt use keyword\");\n      }\n    }\n\n    var idIndex = Math.floor(Math.random() * searchLength);\n    console.log(\"LENGTH: \" + data.items.length);\n    var randomURL = \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\n    console.log(\"Our URL: \" + randomURL);\n    console.log(data);\n    this.setState({\n      videoURL: randomURL\n    });\n    return randomURL;\n  }\n\n  async createWordList() {\n    var words = [];\n    let res = await fetch(\"/common-words.json\");\n    let data = await res.json();\n    console.log(data);\n\n    for (var i = 0; i < data.length; i++) {\n      words.push(data[i]);\n    }\n\n    return words;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RandomVideoButton, {\n          onClick: this.getRandomVideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiddleRow, {\n          url: this.state.videoURL,\n          updateCategory: this.updateCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mikes/Documents/GitHub/ytr/src/app.js"],"names":["React","Component","Title","MiddleRow","RandomVideoButton","Filter","catagoriesMap","Map","set","App","constructor","props","getRandomVideo","getVideo","updateCategory","bind","state","videoURL","searchWords","category","length","year","categoryName","duration","selectedYear","categoryNumber","get","setState","console","log","keywords","createWordList","keyword","Math","floor","random","youtubeAPIKey","baseApiUrl","apiUrlWithKeyword","res","fetch","data","json","searchLength","items","undefined","alert","idIndex","randomURL","id","videoId","words","i","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Title from \"./components/title.js\";\r\nimport MiddleRow from \"./components/middleRow.js\";\r\nimport RandomVideoButton from \"./components/randomVideoButton.js\";\r\nimport Filter from \"./components/filter.js\"\r\n\r\n//map containing categories and their ID values\r\nvar catagoriesMap = new Map();\r\ncatagoriesMap.set(\"No category\", 0);\r\ncatagoriesMap.set(\"Film & Animation\", 1);\r\ncatagoriesMap.set(\"Autos & Vehicles\", 2);\r\ncatagoriesMap.set(\"Music\", 10);\r\ncatagoriesMap.set(\"Pets & Animals\", 15);\r\ncatagoriesMap.set(\"Sports\", 17);\r\ncatagoriesMap.set(\"Travel & Events\", 19);\r\ncatagoriesMap.set(\"Gaming\", 20);   \r\ncatagoriesMap.set(\"People & Blogs\", 22);\r\ncatagoriesMap.set(\"Comedy\", 23);\r\ncatagoriesMap.set(\"Entertainment\", 24);\r\ncatagoriesMap.set(\"News & Politics\", 25);\r\ncatagoriesMap.set(\"Howto & Style\", 26);\r\ncatagoriesMap.set(\"Education\", 27);\r\ncatagoriesMap.set(\"Science & Technology\", 28);\r\ncatagoriesMap.set(\"Nonprofits & Activism\", 29);\r\ncatagoriesMap.set(\"Movies\", 30);\r\ncatagoriesMap.set(\"Trailers\", 44);\r\n\r\n//todo: dont create the \"words\" array every time they click the button\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.updateCategory = this.updateCategory.bind(this);\r\n    this.state = {\r\n      videoURL: \"\",\r\n      searchWords: [],\r\n      category: 0,\r\n      length: \"any\",\r\n      year: 0,\r\n    };\r\n  }\r\n\r\n  updateCategory(categoryName, duration, selectedYear) {\r\n    var categoryNumber = catagoriesMap.get(categoryName);\r\n    this.setState({ category: categoryNumber}); \r\n    this.setState({ length: duration}); \r\n    this.setState({ year: selectedYear}); \r\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\r\n    console.log(\"Length:\", duration);\r\n    console.log(\"year:\", selectedYear);\r\n  };\r\n\r\n  async getVideo(keywords) {\r\n    var keywords = await this.createWordList();\r\n    var keyword = keywords[Math.floor(Math.random() * keywords.length + 1)];\r\n    console.log(\"Chosen Keyword: \" + keyword);\r\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\";\r\n\r\n    //api url before adding our values from the filters\r\n    //var baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=\" + keyword +  \"&type=video\"     + \"&key=\" + youtubeAPIKey;\r\n    var baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25\" +  \"&type=video\" + \"&key=\" + youtubeAPIKey;\r\n    \r\n\r\n    //filter by a category\r\n    if (this.state.category != 0){\r\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\r\n    }\r\n    \r\n    //filter by length\r\n    if (this.state.length != \"any\"){\r\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\r\n    }\r\n   \r\n    //filter by year\r\n    if (this.state.year != 0){\r\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" + \r\n                    \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\r\n    }\r\n\r\n    var apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword\r\n    //apply the key at the end\r\n    //baseApiUrl += \"&key=\" + youtubeAPIKey;\r\n\r\n    //let res = await fetch(baseApiUrl);\r\n    let res = await fetch(apiUrlWithKeyword);\r\n    let data = await res.json(); \r\n    var searchLength = data.items.length;\r\n    if (searchLength == undefined){\r\n      alert(\"The Youtube API quota for this project has been exceeded for today. Unfortunately we can only make 100 requests to the youtube API per day\")\r\n    }\r\n\r\n    //if true, quota is filled, a bad keyword was picked, or filters are not allowing for a video to be found\r\n    if (searchLength == 0){\r\n      //we will make the search without specifying a keyword\r\n      res = await fetch(baseApiUrl);\r\n      data = await res.json(); \r\n      searchLength = data.items.length;\r\n      if (searchLength == 0){\r\n        alert(\"Could not find a video. Youtube API daily quota may be exceeded or the selected filters are not compatible\");\r\n      }\r\n      else{\r\n        alert(\"Didnt use keyword\")\r\n      }\r\n    }\r\n    var idIndex = Math.floor(Math.random() * searchLength);\r\n    console.log(\"LENGTH: \" + data.items.length);\r\n    var randomURL =\r\n      \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\r\n    console.log(\"Our URL: \" + randomURL);\r\n    console.log(data);\r\n    this.setState({ videoURL: randomURL });\r\n    return randomURL;\r\n  }\r\n\r\n  async createWordList() {\r\n    var words = [];\r\n    let res = await fetch(\"/common-words.json\");\r\n    let data = await res.json();\r\n    console.log(data);\r\n    for (var i = 0; i < data.length; i++) {\r\n      words.push(data[i]);\r\n    }\r\n    return words;\r\n  }\r\n\r\n  getRandomVideo = () => {\r\n    this.getVideo();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <body>\r\n        <div>\r\n          <Title />\r\n          <RandomVideoButton onClick={this.getRandomVideo} />\r\n          <MiddleRow url={this.state.videoURL} updateCategory={this.updateCategory} />\r\n        </div>\r\n      </body>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}