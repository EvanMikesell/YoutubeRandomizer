{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mikes\\\\Documents\\\\GitHub\\\\YoutubeRandomizer\\\\src\\\\app.js\";\nimport React, { Component } from \"react\";\nimport Title from \"./components/title.js\";\nimport MiddleRow from \"./components/middleRow.js\";\nimport EmbeddedVideo from \"./components/embeddedVideo.js\";\nconst categoriesMap = new Map([[\"No category\", 0], [\"Film & Animation\", 1], [\"Autos & Vehicles\", 2], [\"Music\", 10], [\"Pets & Animals\", 15], [\"Sports\", 17], [\"Travel & Events\", 19], [\"Gaming\", 20], [\"People & Blogs\", 22], [\"Comedy\", 23], [\"Entertainment\", 24], [\"News & Politics\", 25], [\"Howto & Style\", 26], [\"Education\", 27], [\"Science & Technology\", 28], [\"Nonprofits & Activism\", 29], [\"Movies\", 30], [\"Trailers\", 44]]);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomVideo = () => {\n      this.getVideo();\n    };\n\n    this.updateFilters = this.updateFilters.bind(this);\n    this.state = {\n      videoURL: \"\",\n      searchWords: [],\n      category: 0,\n      length: \"any\",\n      year: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.createWordList();\n  } //getting values from our filter\n\n\n  updateFilters(categoryName, duration, selectedYear) {\n    let categoryNumber = categoriesMap.get(categoryName);\n    this.setState({\n      category: categoryNumber\n    });\n    this.setState({\n      length: duration\n    });\n    this.setState({\n      year: selectedYear\n    });\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\n    console.log(\"Length:\", duration);\n    console.log(\"Year:\", selectedYear);\n  }\n\n  async getVideo() {\n    let keyword = this.state.searchWords[Math.floor(Math.random() * this.state.searchWords.length + 1)];\n    console.log(\"Chosen Keyword: \" + keyword);\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\";\n    let baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&type=video&key=\" + youtubeAPIKey;\n    baseApiUrl = this.applyFilters(baseApiUrl);\n    let apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword; //make API call\n\n    let res = await fetch(apiUrlWithKeyword);\n    console.log(res);\n    let data = await res.json();\n    let searchLength = 0; //checking if api quota has been exceeded, searchlength will be undefined\n\n    try {\n      searchLength = data.items.length;\n    } catch (error) {\n      alert(\"The Youtube API quota for this project has been exceeded. Unfortunately we can only make 100 requests each day. Quota resets at 12AM PST.\");\n    } //if true, either a bad keyword was picked, or filters are not allowing for a video to be found\n\n\n    if (searchLength === 0) {\n      //we will make the search without specifying a keyword\n      res = await fetch(baseApiUrl);\n      data = await res.json();\n      searchLength = data.items.length;\n\n      if (searchLength === 0) {\n        alert(\"Could not find a video. The selected filters may not be compatible with eachother.\");\n      } else {\n        alert(\"Found a video, but didn't use keyword\");\n      }\n    }\n\n    let idIndex = Math.floor(Math.random() * searchLength);\n    let randomURL = \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\n    this.setState({\n      videoURL: randomURL\n    });\n    return randomURL;\n  }\n\n  applyFilters(baseApiUrl) {\n    //filter by category, length, and year\n    if (this.state.category !== 0) {\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\n    }\n\n    if (this.state.length !== \"any\") {\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\n    }\n\n    if (this.state.year !== 0) {\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" + \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\n    }\n\n    return baseApiUrl;\n  } //creating random word list that we will use to search for a video\n\n\n  async createWordList() {\n    try {\n      const response = await fetch(\"/common-words.json\");\n      const data = await response.json();\n      console.log(data);\n      this.setState({\n        searchWords: data\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiddleRow, {\n          updateFilters: this.updateFilters,\n          getRandomVideo: this.getRandomVideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EmbeddedVideo, {\n          url: this.state.videoURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mikes/Documents/GitHub/YoutubeRandomizer/src/app.js"],"names":["React","Component","Title","MiddleRow","EmbeddedVideo","categoriesMap","Map","App","constructor","props","getRandomVideo","getVideo","updateFilters","bind","state","videoURL","searchWords","category","length","year","componentDidMount","createWordList","categoryName","duration","selectedYear","categoryNumber","get","setState","console","log","keyword","Math","floor","random","youtubeAPIKey","baseApiUrl","applyFilters","apiUrlWithKeyword","res","fetch","data","json","searchLength","items","error","alert","idIndex","randomURL","id","videoId","response","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Title from \"./components/title.js\";\r\nimport MiddleRow from \"./components/middleRow.js\";\r\nimport EmbeddedVideo from \"./components/embeddedVideo.js\";\r\n\r\nconst categoriesMap = new Map([\r\n  [\"No category\", 0],\r\n  [\"Film & Animation\", 1],\r\n  [\"Autos & Vehicles\", 2],\r\n  [\"Music\", 10],\r\n  [\"Pets & Animals\", 15],\r\n  [\"Sports\", 17],\r\n  [\"Travel & Events\", 19],\r\n  [\"Gaming\", 20],\r\n  [\"People & Blogs\", 22],\r\n  [\"Comedy\", 23],\r\n  [\"Entertainment\", 24],\r\n  [\"News & Politics\", 25],\r\n  [\"Howto & Style\", 26],\r\n  [\"Education\", 27],\r\n  [\"Science & Technology\", 28],\r\n  [\"Nonprofits & Activism\", 29],\r\n  [\"Movies\", 30],\r\n  [\"Trailers\", 44]\r\n]);\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.updateFilters = this.updateFilters.bind(this);\r\n    this.state = {\r\n      videoURL: \"\",\r\n      searchWords: [],\r\n      category: 0,\r\n      length: \"any\",\r\n      year: 0\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.createWordList();\r\n  }\r\n\r\n  //getting values from our filter\r\n  updateFilters(categoryName, duration, selectedYear) {\r\n    let categoryNumber = categoriesMap.get(categoryName);\r\n    this.setState({ category: categoryNumber}); \r\n    this.setState({ length: duration}); \r\n    this.setState({ year: selectedYear}); \r\n    console.log(\"Category:\", categoryName, \"ID:\", categoryNumber);\r\n    console.log(\"Length:\", duration);\r\n    console.log(\"Year:\", selectedYear);\r\n  };\r\n\r\n  async getVideo() {\r\n    let keyword = this.state.searchWords[Math.floor(Math.random() * this.state.searchWords.length + 1)];\r\n    console.log(\"Chosen Keyword: \" + keyword);\r\n    const youtubeAPIKey = \"AIzaSyAWwZk3tMo_OZp0JZ9Y17oxykJpng6Q-nY\";\r\n\r\n    let baseApiUrl = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&type=video&key=\" + youtubeAPIKey;\r\n    baseApiUrl = this.applyFilters(baseApiUrl);\r\n    let apiUrlWithKeyword = baseApiUrl + \"&q=\" + keyword\r\n\r\n    //make API call\r\n    let res = await fetch(apiUrlWithKeyword);\r\n    console.log(res)\r\n    let data = await res.json(); \r\n    let searchLength = 0;\r\n\r\n    //checking if api quota has been exceeded, searchlength will be undefined\r\n    try{\r\n      searchLength = data.items.length;\r\n    }\r\n    catch (error){\r\n      alert(\"The Youtube API quota for this project has been exceeded. Unfortunately we can only make 100 requests each day. Quota resets at 12AM PST.\");\r\n    }\r\n\r\n    //if true, either a bad keyword was picked, or filters are not allowing for a video to be found\r\n    if (searchLength === 0){\r\n      //we will make the search without specifying a keyword\r\n      res = await fetch(baseApiUrl);\r\n      data = await res.json(); \r\n      searchLength = data.items.length;\r\n\r\n      if (searchLength === 0){\r\n        alert(\"Could not find a video. The selected filters may not be compatible with eachother.\");\r\n      }\r\n      else{\r\n        alert(\"Found a video, but didn't use keyword\");\r\n      }\r\n    }\r\n\r\n    let idIndex = Math.floor(Math.random() * searchLength);\r\n    let randomURL = \"https://www.youtube.com/embed/\" + data.items[idIndex].id.videoId;\r\n    this.setState({ videoURL: randomURL });\r\n    return randomURL;\r\n  }\r\n\r\n  applyFilters(baseApiUrl) {\r\n    //filter by category, length, and year\r\n    if (this.state.category !== 0) {\r\n      baseApiUrl += \"&videoCategoryId=\" + this.state.category;\r\n    }\r\n\r\n    if (this.state.length !== \"any\") {\r\n      baseApiUrl += \"&videoDuration=\" + this.state.length;\r\n    }\r\n\r\n    if (this.state.year !== 0) {\r\n      baseApiUrl += \"&publishedBefore=\" + this.state.year + \"-12-31T00:00:00.0Z\" +\r\n        \"&publishedAfter=\" + this.state.year + \"-01-01T00:00:00.0Z\";\r\n    }\r\n    return baseApiUrl;\r\n  }\r\n\r\n  //creating random word list that we will use to search for a video\r\n  async createWordList() {\r\n    try {\r\n      const response = await fetch(\"/common-words.json\");\r\n      const data = await response.json();\r\n      console.log(data);\r\n      this.setState({ searchWords: data });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  getRandomVideo = () => {\r\n    this.getVideo();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <body>\r\n        <div>\r\n          <Title />\r\n          <MiddleRow updateFilters={this.updateFilters} getRandomVideo={this.getRandomVideo} />\r\n          <EmbeddedVideo url={this.state.videoURL} />\r\n        </div>\r\n      </body>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}